name: Crawler

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      crawl_mode:
        description: '크롤링 모드'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - single_region
          - full_crawl
      province:
        description: '시/도명 (단일 지역 모드에서 사용)'
        required: false
        default: ''
      district:
        description: '시/군/구명 (단일 지역 모드에서 사용)'
        required: false
        default: ''
      dong:
        description: '읍/면/동명 (단일 지역 모드에서 사용)'
        required: false
        default: ''

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 테스트 실행
    runs-on: self-hosted

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 환경 확인
      run: |
        python3 --version
        pip3 --version

    - name: 의존성 설치
      run: |
        pip3 install -r requirements.txt

    - name: 테스트 환경 설정 (기존 MariaDB 사용)
      run: |
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=3308" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=coumap" >> $GITHUB_ENV
        echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> $GITHUB_ENV
        echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> $GITHUB_ENV
        echo "HEADLESS=true" >> $GITHUB_ENV

    - name: DB 연결 테스트
      run: |
        python3 -c "
        from src.database import Database
        try:
            db = Database()
            print('MariaDB 연결 성공!')
            print(f'연결 정보: {db.engine.url}')
        except Exception as e:
            print(f'DB 연결 실패: {e}')
            raise
        "

    - name: 데이터베이스 테이블 생성
      run: |
        python3 -c "
        from src.database import Database
        from src.models import Base
        db = Database()
        Base.metadata.create_all(db.engine)
        print('테이블 생성 완료')
        "

    - name: 단위 테스트 실행
      run: |
        pytest -v || echo "테스트 실행 (일부 실패 가능)"

  crawl:
    name: 크롤링 실행
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 환경 확인
      run: |
        python3 --version
        pip3 --version

    - name: Chrome 설치 확인
      run: |
        google-chrome --version || chromium --version || echo "Chrome/Chromium 수동 설치 필요"

    - name: 의존성 설치
      run: |
        pip3 install -r requirements.txt

    - name: 환경 변수 설정 (기존 MariaDB 사용)
      run: |
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=3308" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=coumap" >> $GITHUB_ENV
        echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> $GITHUB_ENV
        echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> $GITHUB_ENV
        echo "HEADLESS=true" >> $GITHUB_ENV

    - name: DB 연결 테스트
      run: |
        python3 -c "
        from src.database import Database
        try:
            db = Database()
            print('MariaDB 연결 성공!')
            stats = db.get_statistics()
            print(f'현재 가맹점 수: {stats[\"total_stores\"]}')
        except Exception as e:
            print(f'DB 연결 실패: {e}')
            raise
        "

    - name: 크롤링 실행
      run: |
        python3 main.py \
          --mode ${{ github.event.inputs.crawl_mode || 'test' }} \
          --province "${{ github.event.inputs.province || '' }}" \
          --district "${{ github.event.inputs.district || '' }}" \
          --dong "${{ github.event.inputs.dong || '' }}"

    - name: 크롤링 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: crawling-results
        path: |
          data/*.csv
          logs/*.log
        retention-days: 30

    - name: 크롤링 통계 출력
      run: |
        python3 -c "
        from src.database import Database
        db = Database()
        stats = db.get_statistics()
        print(f'총 가맹점 수: {stats[\"total_stores\"]}')
        print(f'좌표 보유 가맹점: {stats[\"stores_with_coordinates\"]}')
        print(f'성공률: {stats[\"success_rate\"]}%')
        "
